<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Baking Measurement Tool</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=forum" />
</head>
<body style="background-image: url('https://images.rawpixel.com/image_social_landscape/czNmcy1wcml2YXRlL3Jhd3BpeGVsX2ltYWdlcy93ZWJzaXRlX2NvbnRlbnQvbHIvcHgxMjcxNTgxLWltYWdlLWt3dnkxajhoLmpwZw.jpg'); background-size: cover; backdrop-filter: brightness(0.5); background-position: center;">

    <div class="container mx-auto h-screen flex items-center justify-center">

        <div class="bg-white bg-opacity-70 p-5 rounded-lg shadow-lg max-w-lg mx-auto" id="conversionBox">

            <header class="text-center py-5">
                <h1 class="text-4xl font-bold">Baking Measurement Tool</h1>
            </header>
            <div class="flex flex-col items-center" id="conversionForm">
                <select id="ingredient" class="border p-2 mb-5 w-full">
                    <option value="">Select an ingredient</option>
                </select>
                <input type="number" name="quantity" class="border p-2 mb-5 w-full" id="quantity" placeholder="quantity">
                <select id="size" class="border p-2 mb-5 w-full">
                    <option value="">Select measurement size</option>
                </select>
                <button id="convert" class="bg-yellow-500 text-white p-2 w-full">Convert</button>

            </div>
            <p id="weight" class="text-center mt-5"></p>
        </div>

        <div class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden" id="overlay">
            <div class="border p-4 rounded-lg shadow-lg mb-5 hidden bg-white flex flex-col justify-between" id="chatContainer" style="z-index: 100; height: 600px; width: 500px; margin: auto;">
                <div id="chatHistory" class="mt-5 text-left overflow-y-auto" style="max-height: 550px;">
                    <div class="p-3 bg-green-100 rounded-lg">
                        <p> <strong>Baker Buddy:</strong> Hello! Baker Buddy at your service! How can I help you with your baking today? </p>
                    </div>
                </div>
                <div id="loadingIndicator" class="hidden">
                    <div class="loader"></div>
                    <style>
                        .loader {
                        width: 40px;
                        aspect-ratio: 2;
                        --_g: no-repeat radial-gradient(circle closest-side,#000 90%,#0000);
                        background: 
                            var(--_g) 0%   50%,
                            var(--_g) 50%  50%,
                            var(--_g) 100% 50%;
                        background-size: calc(100%/3) 50%;
                        animation: l3 1s infinite linear;
                        }
                        @keyframes l3 {
                            20%{background-position:0%   0%, 50%  50%,100%  50%}
                            40%{background-position:0% 100%, 50%   0%,100%  50%}
                            60%{background-position:0%  50%, 50% 100%,100%   0%}
                            80%{background-position:0%  50%, 50%  50%,100% 100%}
                        }
                    </style>
                </div>
                <div id="chatResponse" class="color-red"></div>
                <div class="flex flex-col items-start ">
                    <input type="text" id="chatInput" class="border p-2 mr-2 w-full m-2" placeholder="Type your message here...">
                    <button id="sendChat" class="bg-yellow-500 text-white p-2 w-full m-2">Send</button>
                </div>
            </div>
        </div>

        <button id="chatToggle" class="fixed bottom-5 right-5 bg-yellow-500 text-white p-3 rounded-full z-50"><span class="material-symbols-outlined">forum</span></button>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const chatToggleButton = document.getElementById('chatToggle');
        chatToggleButton.addEventListener('click', () => {
            const chatContainer = document.getElementById('chatContainer');
            const overlay = document.getElementById('overlay');

        });
        document.getElementById('chatToggle').addEventListener('click', () => {

            chatContainer.classList.toggle('hidden');
            overlay.classList.toggle('hidden');

            if (chatContainer.classList.contains('hidden')) {
                chatToggleButton.innerHTML = '<span class="material-symbols-outlined">forum</span>'; 
            } else {
                chatToggleButton.innerText = '✖';
            }



            if (chatContainer.classList.contains('hidden')) {
                chatToggleButton.innerHTML = '<span class="material-symbols-outlined">forum</span>'; 
            } else {
                chatToggleButton.innerText = '✖';
            }
        });

        const fetchIngredients = async () => {
            try {
                const response = await axios.get('/api/ingredients');
                const ingredients = response.data;
                const ingredientSelect = document.getElementById('ingredient');
                ingredients.forEach(ingredient => {
                    const option = document.createElement('option');
                    option.value = ingredient.name;
                    option.textContent = ingredient.name;
                    ingredientSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching ingredients:', error);
            }
        };

        const fetchMeasurements = async () => {
            try {
                const response = await axios.get('/api/measurements');
                const measurements = response.data;
                const measurementsSelect = document.getElementById('size');
                measurements.forEach(measurements => {
                    const option = document.createElement('option');
                    option.value = measurements.size;
                    option.textContent = measurements.size;
                    measurementsSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching measurements:', error);
            }
        };

        const sendMessage = async () => {
            const chatHistory = document.getElementById('chatHistory');
            const message = document.getElementById('chatInput').value;
            chatHistory.innerHTML += `<div class="p-3 bg-blue-100 rounded-lg m-2" <p style="text-align:right"><strong>You:</strong> ${message}</p> </div>`;
            document.getElementById('chatInput').value = "";
            
            document.getElementById('loadingIndicator').classList.remove('hidden');

            try {
                const response = await axios.post('/api/chatbot', { message });
                chatHistory.innerHTML += `<div class="p-3 bg-green-100 rounded-lg m-2" <p style="text-align:left"><strong>Baker Buddy:</strong> ${response.data}</p> </div>`;
            } catch (error) {
                alert(error);
            } finally {
                document.getElementById('loadingIndicator').classList.add('hidden');
            }
        };

        document.getElementById('sendChat').addEventListener('click', sendMessage);

        document.getElementById('chatInput').addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });

        document.getElementById('convert').addEventListener('click', async () => {
            const ingredient = document.getElementById('ingredient').value;
            const size = document.getElementById('size').value;
            const quantity = document.getElementById('quantity').value;
            try {
                let vol = await axios.post('/api/convertMeasurement', {size});
                let density = await axios.post('/api/convertIngredient', { ingredient});
                let volume= quantity* vol.data.vol;
                let weight = volume*density.data.density;
                document.getElementById('weight').innerText = `Weight: ${(Math.round(weight*100)/100)} grams`;
            } catch (error) {
                document.getElementById('weight').innerText = 'Error: Ingredient or size not found';
            }
        });

        fetchIngredients();
        fetchMeasurements();
    </script>
</body>
</html>
