<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Baking Measurement Tool</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
</head>
<body>
    <div class="container mx-auto h-screen">
        <header class="text-center py-5">
            <h1 class="text-3xl font-bold">Baking Measurement Tool</h1>
        </header>
        <div class="flex justify-center">
            <select id="ingredient" class="border p-2 mr-2">
                <option value="">Select an ingredient</option>
            </select>
            <input type="number" name="quantity" class="border p-2" id="quantity" placeholder="quantity">
            <select id="size" class="border p-2">
                <option value="">Select measurement size</option>
            </select>
            <button id="convert" class="bg-blue-500 text-white p-2 ml-2">Convert</button>
        </div>
        <p id="weight" class="text-center mt-5"></p>
        
        <div class="border p-4 rounded-lg shadow-lg mb-5">

            <div class="flex justify-center mb-3">
                <div class="flex">
                    <input type="text" id="chatInput" class="border p-2 mr-2" placeholder="Type your message here...">
                    <button id="sendChat" class="bg-blue-500 text-white p-2">Send</button>
                </div>
            </div>
            <div id="chatHistory" class="mt-5 text-center">
                <b>Chatbot:</b> Hi there! How can I help you with your baking today?
            </div>
            <div id="loadingIndicator" class="hidden text-center mt-2">
                <p>Loading...</p>
                <div class="loader"></div> <!-- loader -->
            </div>
        </div>

        <div id="chatResponse" class="mt-5 text-center"></div>

    </div>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // Fetch ingredients and populate the dropdown
        const fetchIngredients = async () => {
            try {
                const response = await axios.get('/api/ingredients');
                const ingredients = response.data;
                const ingredientSelect = document.getElementById('ingredient');
                ingredients.forEach(ingredient => {
                    const option = document.createElement('option');
                    option.value = ingredient.name;
                    option.textContent = ingredient.name;
                    ingredientSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching ingredients:', error);
            }
        };

        const fetchMeasurements = async () => {
            try {
                const response = await axios.get('/api/measurements');
                const measurements = response.data;
                const measurementsSelect = document.getElementById('size');
                measurements.forEach(measurements => {
                    const option = document.createElement('option');
                    option.value = measurements.size;
                    option.textContent = measurements.size;
                    measurementsSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching measurements:', error);
            }
        };

        document.getElementById('convert').addEventListener('click', async () => {
            const ingredient = document.getElementById('ingredient').value;
            const size = document.getElementById('size').value;
            const quantity = document.getElementById('quantity').value;
            try {
                let vol = await axios.post('/api/convertMeasurement', {size});
                let density = await axios.post('/api/convertIngredient', { ingredient});
                let volume= quantity* vol.data.vol;
                let weight = volume*density.data.density;
                document.getElementById('weight').innerText = `Weight: ${(Math.round(weight*100)/100)} grams`;
            } catch (error) {
                document.getElementById('weight').innerText = 'Error: Ingredient or size not found';
            }
        });

        fetchIngredients();
        fetchMeasurements();

        document.getElementById('sendChat').addEventListener('click', async () => {
            const chatHistory = document.getElementById('chatHistory');
            const message = document.getElementById('chatInput').value;
            chatHistory.innerHTML += `<p><strong>You:</strong> ${message}</p>`;
            document.getElementById('chatInput').value = "";
            
            document.getElementById('loadingIndicator').classList.remove('hidden');

            try {
                const response = await axios.post('/api/chatbot', { message });
                chatHistory.innerHTML += `<p><strong>Chatbot:</strong> ${response.data}</p>`;
            } catch (error) {
                document.getElementById('chatResponse').innerText = 'Error: Unable to get response from chatbot';
            } finally {

                document.getElementById('loadingIndicator').classList.add('hidden');
            }
        });

    </script>
</body>
</html>
